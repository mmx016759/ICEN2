using System.Numerics;
using ImGuiNET;

namespace ICEN2.白魔.设置.标签.小游戏
{
    public class 推箱子游戏 : I游戏接口
    {
        private const int 格子大小 = 40;
        private int[,] 当前关卡;
        private int 玩家X, 玩家Y;
        private int 关卡索引 = 0;
        private bool 胜利 = false;
        private bool 显示操作说明 = false;
        
        // 0: 空地, 1: 墙, 2: 箱子, 3: 目标点, 4: 箱子在目标点上, 5: 玩家, 6: 玩家在目标点上
        private List<int[,]> 所有关卡 = new List<int[,]>
        {
            // 第1关 (简单)
            new int[,] 
            {
                {1,1,1,1,1,1},
                {1,0,0,0,0,1},
                {1,0,2,3,0,1},
                {1,0,5,0,0,1},
                {1,0,0,0,0,1},
                {1,1,1,1,1,1}
            },
            
            // 第2关 (简单)
            new int[,] 
            {
                {1,1,1,1,1,1,1},
                {1,0,0,0,0,0,1},
                {1,0,0,2,0,0,1},
                {1,0,3,5,3,0,1},
                {1,0,0,2,0,0,1},
                {1,0,0,0,0,0,1},
                {1,1,1,1,1,1,1}
            },
            
            // 第3关 (简单)
            new int[,] 
            {
                {1,1,1,1,1,1,1},
                {1,0,0,0,0,0,1},
                {1,0,2,2,2,0,1},
                {1,0,0,1,3,0,1},
                {1,0,0,5,3,0,1},
                {1,0,0,3,0,0,1},
                {1,1,1,1,1,1,1}
            },
            
            // 第4关 (中等)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1},
                {1,0,0,0,0,0,0,1},
                {1,0,0,2,2,0,0,1},
                {1,0,0,2,2,0,0,1},
                {1,0,3,3,3,3,0,1},
                {1,0,0,5,0,0,0,1},
                {1,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1}
            },
            
            // 第5关 (中等)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1},
                {1,0,0,0,0,0,0,1},
                {1,0,2,2,2,2,0,1},
                {1,0,0,1,1,0,0,1},
                {1,0,0,5,0,0,0,1},
                {1,0,3,3,3,3,0,1},
                {1,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1}
            },
            
            // 第6关 (中等)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1},
                {1,3,0,0,1,0,0,3,1},
                {1,0,2,0,1,0,2,0,1},
                {1,0,0,0,0,0,0,0,1},
                {1,1,0,1,1,1,0,1,1},
                {1,0,0,0,5,0,0,0,1},
                {1,0,2,0,0,0,2,0,1},
                {1,3,0,0,1,0,0,3,1},
                {1,1,1,1,1,1,1,1,1}
            },
            
            // 第7关 (中等)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1},
                {1,3,3,3,0,0,0,0,1},
                {1,3,2,2,2,0,0,0,1},
                {1,3,0,0,1,0,0,0,1},
                {1,0,2,0,5,0,2,0,1},
                {1,0,0,0,1,0,0,0,1},
                {1,0,2,2,2,2,2,0,1},
                {1,0,3,3,3,3,3,0,1},
                {1,1,1,1,1,1,1,1,1}
            },
            
            // 第8关 (中等)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1},
                {1,0,0,0,0,0,0,0,1},
                {1,0,2,2,2,2,2,0,1},
                {1,0,0,0,1,0,0,0,1},
                {1,0,2,0,5,0,2,0,1},
                {1,0,0,0,1,0,0,0,1},
                {1,0,2,2,2,2,2,0,1},
                {1,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1}
            },
            
            // 第9关 (困难)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1},
                {1,3,3,3,0,0,0,0,0,1},
                {1,3,2,3,0,2,0,0,0,1},
                {1,3,2,2,2,0,0,0,0,1},
                {1,0,0,2,5,2,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1}
            },
            
            // 第10关 (困难)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,2,2,0,0,2,2,0,1},
                {1,0,2,0,3,3,0,2,0,1},
                {1,0,0,0,5,0,0,0,0,1},
                {1,0,2,0,3,3,0,2,0,1},
                {1,0,2,2,0,0,2,2,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1}
            },
            
            // 第11关 (困难)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1},
                {1,3,0,0,0,0,0,0,3,1},
                {1,0,2,2,0,0,2,2,0,1},
                {1,0,2,0,3,3,0,2,0,1},
                {1,0,0,0,5,0,0,0,0,1},
                {1,0,2,0,3,3,0,2,0,1},
                {1,0,2,2,0,0,2,2,0,1},
                {1,3,0,0,0,0,0,0,3,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1}
            },
            
            // 第12关 (困难)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1},
                {1,0,0,0,0,1,0,0,0,1},
                {1,0,2,0,0,1,0,2,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,1,0,1,1,1,0,1,1,1},
                {1,0,0,0,5,0,0,0,0,1},
                {1,0,2,0,0,0,2,0,0,1},
                {1,0,0,0,1,0,0,0,0,1},
                {1,0,0,0,1,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1}
            },
            
            // 第13关 (专家)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1},
                {1,3,3,3,0,0,0,3,3,1},
                {1,3,2,3,0,2,0,3,2,1},
                {1,3,2,2,2,0,0,2,3,1},
                {1,0,0,2,5,2,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1}
            },
            
            // 第14关 (专家)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,2,2,2,2,2,2,0,1},
                {1,0,0,0,1,1,0,0,0,1},
                {1,0,0,0,5,0,0,0,0,1},
                {1,0,3,3,3,3,3,3,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1}
            },
            
            // 第15关 (专家)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1},
                {1,3,3,3,0,0,0,0,0,1},
                {1,3,2,3,0,2,0,2,0,1},
                {1,3,2,2,2,0,2,0,0,1},
                {1,0,0,2,5,2,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1}
            },
            
            // 第16关 (专家)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,2,2,0,0,2,2,0,1},
                {1,0,2,0,3,3,0,2,0,1},
                {1,0,0,3,5,3,0,0,0,1},
                {1,0,2,0,3,3,0,2,0,1},
                {1,0,2,2,0,0,2,2,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1}
            },
            
            // 第17关 (大师)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1},
                {1,3,3,3,0,0,0,3,3,1},
                {1,3,2,3,0,2,0,3,2,1},
                {1,3,2,2,2,0,0,2,3,1},
                {1,0,0,2,5,2,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1}
            },
            
            // 第18关 (大师)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,2,2,2,2,2,2,0,1},
                {1,0,0,0,1,1,0,0,0,1},
                {1,0,0,0,5,0,0,0,0,1},
                {1,0,3,3,3,3,3,3,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1}
            },
            
            // 第19关 (大师)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1},
                {1,3,3,3,0,0,0,0,0,1},
                {1,3,2,3,0,2,0,2,0,1},
                {1,3,2,2,2,0,2,0,0,1},
                {1,0,0,2,5,2,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,0,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1}
            },
            
            // 第20关 (终极挑战)
            new int[,] 
            {
                {1,1,1,1,1,1,1,1,1,1,1,1},
                {1,0,0,0,0,0,0,0,0,0,0,1},
                {1,0,2,2,2,0,0,2,2,2,0,1},
                {1,0,2,0,0,2,2,0,0,2,0,1},
                {1,0,0,2,0,5,0,0,2,0,0,1},
                {1,0,0,0,0,0,0,0,0,0,0,1},
                {1,0,0,3,3,3,3,3,3,0,0,1},
                {1,0,3,3,3,3,3,3,3,3,0,1},
                {1,0,3,3,0,0,0,0,3,3,0,1},
                {1,0,3,0,0,0,0,0,0,3,0,1},
                {1,0,0,0,0,0,0,0,0,0,0,1},
                {1,1,1,1,1,1,1,1,1,1,1,1}
            }
        };

        public 推箱子游戏()
        {
            加载关卡(关卡索引);
        }

        public void 绘制()
        {
            ImGui.PushStyleVar(ImGuiStyleVar.ItemSpacing, new Vector2(10, 15));
            
            // 标题和关卡信息
            ImGui.TextColored(new Vector4(0, 0.8f, 1, 1), "推箱子游戏");
            ImGui.SameLine();
            if (ImGui.Button(显示操作说明 ? "隐藏操作说明" : "显示操作说明"))
            {
                显示操作说明 = !显示操作说明;
            }
            
            ImGui.Text($"当前关卡: {关卡索引 + 1}/{所有关卡.Count}  (难度: {获取难度描述()})");
            
            if (显示操作说明)
            {
                ImGui.TextColored(new Vector4(1, 1, 0, 1), "操作说明:");
                ImGui.Text("1. 使用方向按钮移动玩家");
                ImGui.Text("2. 推动箱子到目标点(红色圆圈)");
                ImGui.Text("3. 所有箱子变为绿色即获胜");
                ImGui.Text("4. 使用关卡选择切换不同关卡");
                ImGui.Text("5. 箱子只能推不能拉");
            }
            
            ImGui.Separator();
            
            // 胜利提示
            if (胜利)
            {
                ImGui.PushStyleColor(ImGuiCol.Text, new Vector4(0, 1, 0, 1));
                ImGui.Text("恭喜过关! 请选择下一关或重新挑战");
                ImGui.PopStyleColor();
            }
            
            var 绘制列表 = ImGui.GetWindowDrawList();
            var 窗口位置 = ImGui.GetCursorScreenPos();
            
            int 高度 = 当前关卡.GetLength(0);
            int 宽度 = 当前关卡.GetLength(1);
            var 游戏区域大小 = new Vector2(宽度 * 格子大小, 高度 * 格子大小);
            
            // 绘制游戏区域背景
            绘制列表.AddRectFilled(窗口位置, 窗口位置 + 游戏区域大小, 
                ImGui.GetColorU32(new Vector4(0.2f, 0.2f, 0.2f, 1)));
            
            // 绘制游戏网格
            for (int y = 0; y < 高度; y++)
            {
                for (int x = 0; x < 宽度; x++)
                {
                    var 格子位置 = 窗口位置 + new Vector2(x * 格子大小, y * 格子大小);
                    var 格子类型 = 当前关卡[y, x];
                    
                    // 先绘制背景
                    if (格子类型 == 0 || 格子类型 == 3 || 格子类型 == 5 || 格子类型 == 6) // 空地或目标点
                    {
                        绘制列表.AddRectFilled(格子位置, 格子位置 + new Vector2(格子大小, 格子大小), 
                            ImGui.GetColorU32(new Vector4(0.25f, 0.25f, 0.3f, 1)));
                    }
                    
                    // 绘制具体元素
                    switch (格子类型)
                    {
                        case 1: // 墙
                            绘制列表.AddRectFilled(格子位置, 格子位置 + new Vector2(格子大小, 格子大小), 
                                ImGui.GetColorU32(new Vector4(0.4f, 0.3f, 0.2f, 1)));
                            break;
                        case 2: // 箱子
                            绘制列表.AddRectFilled(格子位置 + new Vector2(3, 3), 
                                格子位置 + new Vector2(格子大小 - 3, 格子大小 - 3), 
                                ImGui.GetColorU32(new Vector4(0.8f, 0.5f, 0.2f, 1)));
                            break;
                        case 3: // 目标点
                            绘制列表.AddCircleFilled(格子位置 + new Vector2(格子大小 / 2, 格子大小 / 2), 
                                格子大小 / 5, 
                                ImGui.GetColorU32(new Vector4(1, 0.2f, 0.2f, 1)));
                            break;
                        case 4: // 箱子在目标点上
                            绘制列表.AddRectFilled(格子位置 + new Vector2(3, 3), 
                                格子位置 + new Vector2(格子大小 - 3, 格子大小 - 3), 
                                ImGui.GetColorU32(new Vector4(0.2f, 0.8f, 0.2f, 1)));
                            break;
                        case 5: // 玩家
                            绘制列表.AddCircleFilled(格子位置 + new Vector2(格子大小 / 2, 格子大小 / 2), 
                                格子大小 / 3, 
                                ImGui.GetColorU32(new Vector4(0.2f, 0.6f, 1, 1)));
                            break;
                        case 6: // 玩家在目标点上
                            绘制列表.AddCircleFilled(格子位置 + new Vector2(格子大小 / 2, 格子大小 / 2), 
                                格子大小 / 3, 
                                ImGui.GetColorU32(new Vector4(0.2f, 0.6f, 1, 1)));
                            // 在玩家下方绘制目标点
                            绘制列表.AddCircleFilled(格子位置 + new Vector2(格子大小 / 2, 格子大小 / 2), 
                                格子大小 / 5, 
                                ImGui.GetColorU32(new Vector4(1, 0.2f, 0.2f, 0.6f)));
                            break;
                    }
                    
                    // 绘制网格线
                    绘制列表.AddRect(格子位置, 格子位置 + new Vector2(格子大小, 格子大小), 
                        ImGui.GetColorU32(new Vector4(0.4f, 0.4f, 0.4f, 1)));
                }
            }
            
            // 设置光标位置
            ImGui.SetCursorScreenPos(窗口位置 + new Vector2(0, 游戏区域大小.Y + 15));
            
            // 方向控制按钮
            ImGui.Text("方向控制:");
            ImGui.BeginGroup();
            
            // 上方向按钮
            ImGui.PushStyleColor(ImGuiCol.Button, new Vector4(0.3f, 0.5f, 0.8f, 1));
            if (ImGui.Button("↑", new Vector2(50, 50))) 移动(0, -1);
            ImGui.PopStyleColor();
            
            // 左右下方向按钮
            ImGui.BeginGroup();
            ImGui.PushStyleColor(ImGuiCol.Button, new Vector4(0.3f, 0.5f, 0.8f, 1));
            if (ImGui.Button("←", new Vector2(50, 50))) 移动(-1, 0);
            ImGui.SameLine();
            if (ImGui.Button("→", new Vector2(50, 50))) 移动(1, 0);
            ImGui.PopStyleColor();
            ImGui.EndGroup();
            
            // 下方向按钮
            ImGui.PushStyleColor(ImGuiCol.Button, new Vector4(0.3f, 0.5f, 0.8f, 1));
            if (ImGui.Button("↓", new Vector2(50, 50))) 移动(0, 1);
            ImGui.PopStyleColor();
            
            ImGui.EndGroup();
            
            ImGui.Spacing();
            
            // 关卡选择
            ImGui.Text("关卡选择:");
            if (ImGui.BeginCombo("##关卡选择", $"关卡 {关卡索引 + 1}"))
            {
                for (int i = 0; i < 所有关卡.Count; i++)
                {
                    bool isSelected = (关卡索引 == i);
                    if (ImGui.Selectable($"关卡 {i + 1} - {获取难度描述(i)}", isSelected))
                    {
                        关卡索引 = i;
                        加载关卡(关卡索引);
                    }
                    if (isSelected)
                    {
                        ImGui.SetItemDefaultFocus();
                    }
                }
                ImGui.EndCombo();
            }
            
            ImGui.Spacing();
            
            // 游戏控制按钮
            ImGui.BeginGroup();
            
            // 重置按钮
            ImGui.PushStyleColor(ImGuiCol.Button, new Vector4(0.4f, 0.8f, 0.4f, 1));
            if (ImGui.Button("重新开始", new Vector2(100, 40)))
            {
                加载关卡(关卡索引);
            }
            ImGui.PopStyleColor();
            
            ImGui.SameLine();
            
            // 上一关按钮
            ImGui.PushStyleColor(ImGuiCol.Button, new Vector4(0.9f, 0.7f, 0.3f, 1));
            if (ImGui.Button("上一关", new Vector2(80, 40)) && 关卡索引 > 0)
            {
                关卡索引--;
                加载关卡(关卡索引);
            }
            ImGui.PopStyleColor();
            
            ImGui.SameLine();
            
            // 下一关按钮
            ImGui.PushStyleColor(ImGuiCol.Button, new Vector4(0.3f, 0.7f, 0.9f, 1));
            if (ImGui.Button("下一关", new Vector2(80, 40)) && 关卡索引 < 所有关卡.Count - 1)
            {
                关卡索引++;
                加载关卡(关卡索引);
            }
            ImGui.PopStyleColor();
            
            ImGui.EndGroup();
            
            ImGui.PopStyleVar(); // ItemSpacing
        }
        
        private string 获取难度描述(int 关卡 = -1)
        {
            if (关卡 == -1) 关卡 = 关卡索引;
            
            if (关卡 < 3) return "简单";
            if (关卡 < 6) return "中等";
            if (关卡 < 12) return "困难";
            if (关卡 < 17) return "专家";
            return "大师";
        }
        
        private void 移动(int dx, int dy)
        {
            if (胜利) return;
            
            int 新玩家X = 玩家X + dx;
            int 新玩家Y = 玩家Y + dy;
            
            // 检查边界
            if (新玩家X < 0 || 新玩家Y < 0 || 
                新玩家Y >= 当前关卡.GetLength(0) || 
                新玩家X >= 当前关卡.GetLength(1))
                return;
                
            int 目标格子 = 当前关卡[新玩家Y, 新玩家X];
            
            // 如果是空地或目标点
            if (目标格子 == 0 || 目标格子 == 3 || 目标格子 == 6)
            {
                // 处理玩家离开当前位置
                int 玩家当前位置状态 = 当前关卡[玩家Y, 玩家X];
                int 离开后状态 = (玩家当前位置状态 == 5) ? 0 : 
                                 (玩家当前位置状态 == 6) ? 3 : 玩家当前位置状态;
                当前关卡[玩家Y, 玩家X] = 离开后状态;
                
                // 处理玩家到达新位置
                int 新位置状态 = 当前关卡[新玩家Y, 新玩家X];
                当前关卡[新玩家Y, 新玩家X] = (新位置状态 == 0 || 新位置状态 == 5) ? 5 : 6;
                
                玩家X = 新玩家X;
                玩家Y = 新玩家Y;
            }
            // 如果是箱子
            else if (目标格子 == 2 || 目标格子 == 4)
            {
                int 箱子后X = 新玩家X + dx;
                int 箱子后Y = 新玩家Y + dy;
                
                // 检查箱子后的位置
                if (箱子后X < 0 || 箱子后Y < 0 || 
                    箱子后Y >= 当前关卡.GetLength(0) || 
                    箱子后X >= 当前关卡.GetLength(1))
                    return;
                    
                int 箱子后格子 = 当前关卡[箱子后Y, 箱子后X];
                
                // 箱子后必须是空地或目标点
                if (箱子后格子 == 0 || 箱子后格子 == 3 || 箱子后格子 == 6)
                {
                    // 移动箱子
                    if (箱子后格子 == 0 || 箱子后格子 == 5)
                    {
                        当前关卡[箱子后Y, 箱子后X] = 2;
                    }
                    else // 目标点或玩家在目标点上
                    {
                        当前关卡[箱子后Y, 箱子后X] = 4;
                    }
                    
                    // 更新原箱子位置
                    if (目标格子 == 2)
                    {
                        当前关卡[新玩家Y, 新玩家X] = 0;
                    }
                    else // 箱子在目标点上
                    {
                        当前关卡[新玩家Y, 新玩家X] = 3;
                    }
                    
                    // 移动玩家
                    int 玩家当前位置状态 = 当前关卡[玩家Y, 玩家X];
                    int 离开后状态 = (玩家当前位置状态 == 5) ? 0 : 
                                     (玩家当前位置状态 == 6) ? 3 : 玩家当前位置状态;
                    当前关卡[玩家Y, 玩家X] = 离开后状态;
                    
                    // 玩家移动到新位置
                    当前关卡[新玩家Y, 新玩家X] = (目标格子 == 2) ? 5 : 6;
                    
                    玩家X = 新玩家X;
                    玩家Y = 新玩家Y;
                    
                    // 检查胜利条件
                    检查胜利();
                }
            }
        }
        
        private void 检查胜利()
        {
            胜利 = true;
            
            for (int y = 0; y < 当前关卡.GetLength(0); y++)
            {
                for (int x = 0; x < 当前关卡.GetLength(1); x++)
                {
                    if (当前关卡[y, x] == 2) // 还有未完成的箱子
                    {
                        胜利 = false;
                        return;
                    }
                }
            }
        }
        
        private void 加载关卡(int 索引)
        {
            当前关卡 = (int[,])所有关卡[索引].Clone();
            胜利 = false;
            
            // 寻找玩家位置
            bool 找到玩家 = false;
            for (int y = 0; y < 当前关卡.GetLength(0); y++)
            {
                for (int x = 0; x < 当前关卡.GetLength(1); x++)
                {
                    if (当前关卡[y, x] == 5 || 当前关卡[y, x] == 6)
                    {
                        玩家X = x;
                        玩家Y = y;
                        找到玩家 = true;
                    }
                }
            }
            
            // 确保找到玩家
            if (!找到玩家)
            {
                // 如果没找到玩家，在第一个空地放置玩家
                for (int y = 0; y < 当前关卡.GetLength(0); y++)
                {
                    for (int x = 0; x < 当前关卡.GetLength(1); x++)
                    {
                        if (当前关卡[y, x] == 0)
                        {
                            当前关卡[y, x] = 5;
                            玩家X = x;
                            玩家Y = y;
                            找到玩家 = true;
                            break;
                        }
                    }
                    if (找到玩家) break;
                }
            }
        }
    }
}